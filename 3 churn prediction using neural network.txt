import pandas as pd  # For data manipulation
import numpy as np  # For numerical operations
from sklearn.model_selection import train_test_split  # For splitting the dataset
from sklearn.preprocessing import StandardScaler  # For feature scaling
from sklearn.metrics import classification_report, accuracy_score  # For model evaluation
from tensorflow import keras  # For building neural networks
from tensorflow.keras import layers  # For layers in neural network
from tensorflow.keras.models import Sequential  # For sequential model

# 1. Load the dataset
df = pd.read_csv('bank_customers.csv')  # Replace with your dataset file

# 2. Understand the dataset
print(df.head())  # Display the first few rows
print(df['exited'].value_counts())  # Show distribution of customers who left vs. not left

# 3. Cleanup (if required)
# Drop rows with missing values
df.dropna(inplace=True)

# Convert categorical variables to dummy variables
df = pd.get_dummies(df, drop_first=True)

# 4. Define features (X) and target variable (y)
X = df.drop('exited', axis=1)  # Features
y = df['exited']  # Target variable (1 = left, 0 = not left)

# 5. Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# 6. Feature scaling
scaler = StandardScaler()  # Initialize scaler
X_train = scaler.fit_transform(X_train)  # Fit and transform training data
X_test = scaler.transform(X_test)  # Transform test data

# 7. Build the neural network model
model = Sequential([  # Use Sequential model for building
    layers.Dense(32, activation='relu', input_shape=(X_train.shape[1],)),  # First hidden layer
    layers.Dense(16, activation='relu'),  # Second hidden layer
    layers.Dense(1, activation='sigmoid')  # Output layer
])

# 8. Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# 9. Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2)

# 10. Evaluate the model
y_pred = (model.predict(X_test) > 0.5).astype("int32")  # Make predictions and convert to binary
print("Model Evaluation:")
print("Accuracy:", accuracy_score(y_test, y_pred))  # Calculate accuracy
print(classification_report(y_test, y_pred))  # Display classification report
