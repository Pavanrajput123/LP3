import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv('uber_data.csv')  # Replace with your dataset file

# 1. Pre-process the dataset
# Drop rows with missing values
data.dropna(inplace=True)

# Convert categorical variables to dummy/indicator variables
data = pd.get_dummies(data, drop_first=True)

# Split features and target variable
X = data.drop('price', axis=1)  # Features (excluding price)
y = data['price']  # Target variable

# 2. Identify outliers using z-score
z_scores = np.abs((X - X.mean()) / X.std())
outliers = (z_scores > 3).any(axis=1)  # Identify rows with any z-score > 3
data_no_outliers = data[~outliers]  # Filter out outliers

# Split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    data_no_outliers.drop('price', axis=1), 
    data_no_outliers['price'], 
    test_size=0.2, 
    random_state=42
)

# 3. Check the correlation
correlation_matrix = data_no_outliers.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

# 4. Implement Linear Regression model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
y_pred_linear = linear_model.predict(X_test)

# 5. Implement Random Forest Regression model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Evaluate the models
def evaluate_model(y_test, y_pred):
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    return rmse, r2

# Evaluate Linear Regression
rmse_linear, r2_linear = evaluate_model(y_test, y_pred_linear)
print(f"Linear Regression - RMSE: {rmse_linear:.2f}, R²: {r2_linear:.2f}")

# Evaluate Random Forest Regression
rmse_rf, r2_rf = evaluate_model(y_test, y_pred_rf)
print(f"Random Forest Regression - RMSE: {rmse_rf:.2f}, R²: {r2_rf:.2f}")
