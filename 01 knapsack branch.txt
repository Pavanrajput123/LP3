import heapq

class Node:
    def __init__(self, level, value, weight, bound):
        self.level = level  # Level in the decision tree (current item index)
        self.value = value  # Total value so far
        self.weight = weight  # Total weight so far
        self.bound = bound  # Upper bound of maximum value achievable

    def __lt__(self, other):
        return self.bound > other.bound  # Max-Heap: prioritize nodes with higher bound

def bound(node, n, capacity, values, weights):
    if node.weight >= capacity:
        return 0  # If weight exceeds capacity, bound is 0 (can't take this branch)

    total_value = node.value
    total_weight = node.weight
    index = node.level + 1

    # Try adding items starting from the next level
    while index < n and total_weight + weights[index] <= capacity:
        total_weight += weights[index]
        total_value += values[index]
        index += 1

    # Add fractional part of the next item if available
    if index < n:
        total_value += (capacity - total_weight) * (values[index] / weights[index])

    return total_value

def knapsack_branch_and_bound(capacity, values, weights):
    n = len(values)

    # Sort items by value-to-weight ratio in descending order
    items = sorted(range(n), key=lambda i: values[i] / weights[i], reverse=True)
    values = [values[i] for i in items]
    weights = [weights[i] for i in items]

    # Priority queue (max-heap) for Branch and Bound
    max_heap = []
    root = Node(level=-1, value=0, weight=0, bound=0)  # Start from the root node
    root.bound = bound(root, n, capacity, values, weights)
    heapq.heappush(max_heap, root)

    max_value = 0  # Track the maximum value found

    # Branch and Bound search
    while max_heap:
        node = heapq.heappop(max_heap)  # Pop node with highest bound

        # If this node cannot improve the max_value, skip it
        if node.bound <= max_value:
            continue

        # Check next level (next item index in original order)
        level = node.level + 1
        if level < n:
            # Case 1: Take the item
            weight_with_item = node.weight + weights[level]
            value_with_item = node.value + values[level]
            if weight_with_item <= capacity and value_with_item > max_value:
                max_value = value_with_item

            # Bound of taking this item
            if weight_with_item <= capacity:
                left_child = Node(level, value_with_item, weight_with_item, 0)
                left_child.bound = bound(left_child, n, capacity, values, weights)
                if left_child.bound > max_value:
                    heapq.heappush(max_heap, left_child)

            # Case 2: Do not take the item
            right_child = Node(level, node.value, node.weight, 0)
            right_child.bound = bound(right_child, n, capacity, values, weights)
            if right_child.bound > max_value:
                heapq.heappush(max_heap, right_child)

    return max_value

# Example usage
capacity = 10
values = [10, 40, 30, 50]
weights = [5, 4, 6, 3]
max_val = knapsack_branch_and_bound(capacity, values, weights)
print("Maximum value achievable:", max_val)
