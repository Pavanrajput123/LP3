# Function to solve 0/1 Knapsack using Dynamic Programming
def knapsack(values, weights, capacity):
    n = len(values)  # Number of items

    # Create a 2D DP table with (n+1) rows and (capacity+1) columns, initialized to 0
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    # Fill the DP table
    for i in range(1, n + 1):  # Loop over items
        for w in range(1, capacity + 1):  # Loop over each capacity from 1 to W
            if weights[i - 1] <= w:
                # Take the maximum of including or excluding the current item
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
            else:
                # If the item's weight is more than the current capacity, skip it
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]  # Maximum value that can be achieved

# Example usage
values = [60, 100, 120]  # Values of the items
weights = [10, 20, 30]   # Weights of the items
capacity = 50  # Capacity of the knapsack

max_value = knapsack(values, weights, capacity)
print(f"Maximum value in the knapsack: {max_value}")
